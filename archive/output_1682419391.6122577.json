{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}, "tests": {"0": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step8", "rerun": "0"}, "1": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step9", "rerun": "0"}}, "suite_name": "test_7z_negative.py"}, "1": {"suite_name": "test_7z_positive.py", "tests": {"0": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step1", "rerun": "0"}, "1": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step2", "rerun": "0"}, "2": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step3", "rerun": "0"}, "3": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step4", "rerun": "0"}, "4": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step5", "rerun": "0"}, "5": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step6", "rerun": "0"}, "6": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step7", "rerun": "0"}, "7": {"status": "ERROR", "message": "print_time = None\n\n    @pytest.fixture(autouse=True)\n    def create_file_txt(print_time):\n        for i in range(1, 200):\n            filename = '{}stat.txt'.format(i)\n        if checkout_positive(\"cd {}; touch {}\".format(data['folder_in'], filename), \"\"):\n            # return filename\n            with open(filename, 'w', encoding='utf-8') as f:\n>               f.write(print_time)\nE               TypeError: write() argument must be str, not None\n\nconftest.py:78: TypeError\n", "test_name": "test_step10", "rerun": "0"}}, "status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 8}}}}, "date": "April 25, 2023", "start_time": 1682419351.7708297, "total_suite": 2, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "10", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "10"}